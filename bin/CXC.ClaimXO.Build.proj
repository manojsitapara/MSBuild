<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Run">

  <!--Msbuild command: msbuild CXC.ClaimXO.Build.proj /p:Environment="Production"-->
  <!--msbuild CXC.ClaimXO.Build.proj /l:XMLFileLogger,..\lib\MSBuild.Extension.Pack.1.8.0\tools\net40\MSBuild.ExtensionPack.Loggers.dll;logfile=CXC.ClaimXO.Log.xml-->
  <!--msbuild CXC.ClaimXO.Build.proj /l:SqlLogger,..\lib\MSBuild.Extension.Pack.1.8.0\tools\net40\MSBuild.ExtensionPack.Loggers.dll;BID=123;BN=2016;DS=.;IC=MSBuildLogs;SP=msbep_SqlLogger-->
  <!--msbuild CXC.ClaimXO.Build.proj /l:SecureFileLogger,..\lib\MSBuild.Extension.Pack.1.8.0\tools\net40\MSBuild.ExtensionPack.Loggers.dll;logfile=CXC.ClaimXO.Log.txt-->

  <!-- For list down all properties -->
  <!--msbuild CXC.ClaimXO.Build.proj /filelogger /fileLoggerParameters:Verbosity=diag-->

  <!--Microsoft logger-->
  <!--msbuild CXC.ClaimXO.Build.proj /fileLogger /fileLoggerParameters:LogFile=MyLog.log;-->
  <!--msbuild CXC.ClaimXO.Build.proj /fl1 /fl2 /fl3 /flp2:logfile=JustErrors.log;errorsonly /flp3:logfile=JustWarnings.log;warningsonly-->

  <!-- Region Import External target -->

  <Import Project="CXC.ClaimXO.BuildTasks.tasks" />
  <Import Project="CXC.ClaimXO.Assembly.Version.Targets"/>
  <Import Project="CXC.ClaimXO.DbDeploy.targets"/>
  <Import Project="CXC.ClaimXO.Backup.targets"/>
  <Import Project="CXC.ClaimXO.EmailNotification.targets"/>

  <!-- EndRegion -->


  <ItemGroup>
    <CXCEngineSolutionFile Include="$(RootDirForSurceCode)\CXC\CXCEngine.sln"></CXCEngineSolutionFile>
    <UpdateAssemblyVersionTarget Include="CustomAfterMicrosoftCommonTargets=$(MSBuildThisFileDirectory)\CXC.ClaimXO.Assembly.Version.Targets;Configuration=Release"></UpdateAssemblyVersionTarget>
  </ItemGroup>


  <Target Name="Init">

    <PropertyGroup>
      <CurrentTargetName>Init</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <Error Text="PayFlex cannot build together with other TPAs, Please check your property file values." Condition=" $(BuildGDI) == 'true' AND $(BuildPrimePay) == 'true' AND $(BuildPayFlex) == 'true' "></Error>
    <CallTarget Targets="CheckChangeLogTableExist"></CallTarget>


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="CheckChangeLogTableExist">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!=''">CheckChangeLogTableExist</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="ExecuteScalar"
      UseTransaction="true"
      Sql="select case when exists((select * from information_schema.tables where table_name = '$(DatabaseChangeLogTableName)')) then 1 else 0 end"
      ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="IsTableExist" TaskParameter="ScalarResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>
    <Message Text="Table status: $(IsTableExist)"></Message>

    <!--Raise an error if changelog table is not exist into dbDeploy database-->
    <Error Text="Please specify assembly version number in property file for this release." Condition=" '$(IsTableExist)' == '0' AND $(AssemblyBuildNumber) == '' "/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>



  <Target Name="CreateFolderStructure">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CreateFolderStructure'">CreateFolderStructure</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <RemoveDir Directories="$(RootDirForSurceCode)" Condition="$(ForceSourceOverwrite)== 'true'"/>

    <MakeDir Directories="$(RootDir)" Condition="!Exists('$(RootDir)')"/>
    <MakeDir Directories="$(RootDirForSurceCode)" Condition="!Exists('$(RootDirForSurceCode)')"/>
    <MakeDir Directories="$(BackupDirForSource)" Condition="!Exists('$(BackupDirForSource)')"/>

    <MakeDir Directories="$(BuildDir)" Condition="!Exists('$(BuildDir)')"/>
    <MakeDir Directories="$(BuildDirForApp)" Condition="!Exists('$(BuildDirForApp)')"/>
    <MakeDir Directories="$(BuildDirForDbDeploy)" Condition="!Exists('$(BuildDirForDbDeploy)')"/>

    <MakeDir Directories="$(DeploymentDir)" Condition="!Exists('$(DeploymentDir)')"/>
    <MakeDir Directories="$(BackupDirForDeployment)" Condition="!Exists('$(BackupDirForDeployment)')"/>
    <MakeDir Directories="$(DeploymentDirForApp)" Condition="!Exists('$(DeploymentDirForApp)')"/>
    <MakeDir Directories="$(DeploymentDirForDbDeploy)" Condition="!Exists('$(DeploymentDirForDbDeploy)')"/>

    <MakeDir Directories="$(DestinationDir)" Condition="!Exists('$(DestinationDir)')"/>
    <MakeDir Directories="$(BackupDirForDestination)" Condition="!Exists('$(BackupDirForDestination)')"/>

    <MakeDir Directories="$(BackupDirForDatabase)" Condition="!Exists('$(BackupDirForDatabase)')"/>


    <MakeDir Directories="$(BuildDirForCXCCoreSchemaChangesSql)" Condition="!Exists('$(BuildDirForCXCCoreSchemaChangesSql)')"/>
    <MakeDir Directories="$(BuildDirForCXCCoreMetaChangesSql)" Condition="!Exists('$(BuildDirForCXCCoreMetaChangesSql)')"/>


    <!-- Need to reomve this command once we have seperate script folder for each TPA -->
    <MakeDir Directories="$(BuildDirForWorkflowFiles)\Common" Condition="!Exists('$(BuildDirForWorkflowFiles)\Common')" />



    <MakeDir Directories="$(BuildDirForDbDeployOutput)" Condition="!Exists('$(BuildDirForDbDeployOutput)')"/>

    <MakeDir Directories="$(TempDir)" Condition="!Exists('$(TempDir))')"/>

    <CallTarget Targets="CreateTPASpecificFolderStructure"></CallTarget>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="CreateTPASpecificFolderStructure" Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this">

    <PropertyGroup>
      <TPAName>%(SolutionName.TPAName)</TPAName>
    </PropertyGroup>
    <Message Text="$(MergeSolution)"></Message>

    <!-- Below two commands creates folder structure for each TPA  -->
    <!--<MakeDir Directories="$(BuildDirForDbDeploy)\$(TPAName)\1.$(TPAName)_MetaChanges" Condition="!Exists('$(BuildDirForDbDeploy)\$(TPAName)\1.$(TPAName)_MetaChanges')"/>
    <MakeDir Directories="$(BuildDirForDbDeploy)\$(TPAName)\2.$(TPAName)_DataChanges" Condition="!Exists('$(BuildDirForDbDeploy)\$(TPAName)\2.$(TPAName)_DataChanges')"/>-->


    <!-- Below two commands creates folder structure in build directory for each TPA  -->
    <MakeDir Directories="$(BuildDirForWorkflowFiles)\$(TPAName)" Condition="!Exists('$(BuildDirForWorkflowFiles)\$(TPAName')"/>



  </Target>

  <Target Name="DownloadPreBuildSourceFromSVN" Condition="$(DownloadSourceCodeFromSVN) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='DownloadPreBuildSourceFromSVN'">DownloadPreBuildSourceFromSVN</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <SvnCheckout  RepositoryPath="$(SVNSourceURL)"
			            LocalPath="$(RootDirForSurceCode)"
			            UserName="$(SvnUsername)"
			            Password="$(SvnPassword)">
      <Output TaskParameter="Revision" PropertyName="Revision" />
    </SvnCheckout>

    <Message Text="Source code downloaded from svn till revision number: $(Revision)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="InitilizeItemGroup">

    <ItemGroup>

      <CXCSecuritySolution Include="$(RootDirForSurceCode)\CXC\ClassLibrary1\CXCSecurity.csproj"></CXCSecuritySolution>
      <CXCSecurityCSharpFiles Include="$(RootDirForSurceCode)\CXC\ClassLibrary1\**\*.cs"></CXCSecurityCSharpFiles>
      <CXCSecurityAssemblyFileName Include="$(RootDirForSurceCode)\CXC\ClassLibrary1\Bin\Release\CXCSecurity.dll"></CXCSecurityAssemblyFileName>


      <CXCDataAccessSolution Include="$(RootDirForSurceCode)\CXC\CXCDataAccess\CXCDataAccess.csproj"></CXCDataAccessSolution>
      <CXCDataAccessCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCDataAccess\**\*.cs"></CXCDataAccessCSharpFiles>
      <CXCDataAccessAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCDataAccess\Bin\Release\CXCDataAccess.dll"></CXCDataAccessAssemblyFileName>


      <CXCNotifierSolution Include="$(RootDirForSurceCode)\CXC\CXCNotifier\CXCNotifier.csproj"></CXCNotifierSolution>
      <CXCNotifierCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCNotifier\**\*.cs"></CXCNotifierCSharpFiles>
      <CXCNotifierAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCNotifier\Bin\Release\CXCNotifier.dll"></CXCNotifierAssemblyFileName>


      <CXCFileWriterSolution Include="$(RootDirForSurceCode)\CXC\CXCFileWriter\CXCFileWriter.csproj"></CXCFileWriterSolution>
      <CXCFileWriterCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCFileWriter\**\*.cs"></CXCFileWriterCSharpFiles>
      <CXCFileWriterAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCFileWriter\Bin\Release\CXCFileWriter.dll"></CXCFileWriterAssemblyFileName>


      <CXCFileReaderSolution Include="$(RootDirForSurceCode)\CXC\CXCFileReader\CXCFileReader.csproj"></CXCFileReaderSolution>
      <CXCFileReaderCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCFileReader\**\*.cs"></CXCFileReaderCSharpFiles>
      <CXCFileReaderAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCFileReader\Bin\Release\CXCFileReader.dll"></CXCFileReaderAssemblyFileName>

      <CXCFaxerSolution Include="$(RootDirForSurceCode)\CXC\CXCFaxer\CXCFaxer.csproj"></CXCFaxerSolution>
      <CXCFaxerCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCFaxer\**\*.cs"></CXCFaxerCSharpFiles>
      <CXCFaxerAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCFaxer\bin\Release\CXFaxer.dll"></CXCFaxerAssemblyFileName>


      <CXCArchiverSolution Include="$(RootDirForSurceCode)\CXC\CXCArchiver\CXCArchiver.csproj"></CXCArchiverSolution>
      <CXCArchiverCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCArchiver\**\*.cs"></CXCArchiverCSharpFiles>
      <CXCArchiverAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCArchiver\Bin\Release\CXCArchiver.dll"></CXCArchiverAssemblyFileName>


      <CXCSchedulerSolution Include="$(RootDirForSurceCode)\CXC\CXCScheduler\CXCScheduler.csproj"></CXCSchedulerSolution>
      <CXCSchedulerCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCScheduler\**\*.cs"></CXCSchedulerCSharpFiles>
      <CXCSchedulerAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCScheduler\Bin\Release\CXCScheduler.dll"></CXCSchedulerAssemblyFileName>


      <CXCCoreSolution Include="$(RootDirForSurceCode)\CXC\CXCCore\CXCCore.csproj"></CXCCoreSolution>
      <CXCCoreCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCCore\**\*.cs"></CXCCoreCSharpFiles>
      <CXCCoreAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCCore\Bin\Release\CXCCore.dll"></CXCCoreAssemblyFileName>


      <CXCEngineSolution Include="$(RootDirForSurceCode)\CXC\CXCEngine\CXCEngine.csproj"></CXCEngineSolution>
      <CXCEngineCSharpFiles Include="$(RootDirForSurceCode)\CXC\CXCEngine\**\*.cs"></CXCEngineCSharpFiles>
      <CXCEngineAssemblyFileName Include="$(RootDirForSurceCode)\CXC\CXCEngine\Bin\Release\CXCEngine.exe"></CXCEngineAssemblyFileName>




      <GDISolutionFile Include="$(RootDirForSurceCode)\TPA\GDI\CXCGDI.sln"></GDISolutionFile>
      <GDICSharpFiles Include="$(RootDirForSurceCode)\TPA\GDI\GDI\**\*.cs"></GDICSharpFiles>
      <GDIAssemblyFile Include="$(RootDirForSurceCode)\TPA\GDI\GDI\Bin\Release\CXCGDI.dll"></GDIAssemblyFile>

      <PrimePaySolution Include="$(RootDirForSurceCode)\TPA\PrimePay\CXCPrimePay.sln"></PrimePaySolution>
      <PrimePayCSharpFiles Include="$(RootDirForSurceCode)\TPA\PrimePay\CXCPrimePay\**\*.cs"></PrimePayCSharpFiles>
      <PrimePayAssemblyFile Include="$(RootDirForSurceCode)\TPA\PrimePay\CXCPrimePay\Bin\Release\CXCPrimePay.dll"></PrimePayAssemblyFile>


      <PayFlexSolution Include="$(RootDirForSurceCode)\TPA\PayFlex\CXCPayFlex.sln"></PayFlexSolution>
      <PayFlexCSharpFiles Include="$(RootDirForSurceCode)\TPA\PayFlex\PayFlex\**\*.cs"></PayFlexCSharpFiles>
      <PayFlexAssemblyFileName Include="$(RootDirForSurceCode)\TPA\PrimePay\CXCPrimePay\Bin\Release\CXCPrimePay.dll"></PayFlexAssemblyFileName>
    </ItemGroup>

  </Target>



  <Target Name="BackupPreBuild">

    <CallTarget Targets="BackupPreBuildDatabase" />
    <CallTarget Targets="BackupPreBuildDestination" />
    <CallTarget Targets="BackupPreBuildSource" />

  </Target>

  <Target Name="BuildSolutions" Condition=" $(OnlyBuildOrOnlyPush) != 'onlypush' ">

    <CallTarget Targets="InitilizeItemGroup"></CallTarget>

    <CallTarget Targets="GetNewAssemblyVersionNumber" Condition=" $(MSBuildLastTaskResult) == 'True'  " />

    <CallTarget Targets="BuildSolution" Condition=" $(MSBuildLastTaskResult) == 'True'  " />

    <CallTarget Targets="CopyBuildFilesToBuildDir" Condition=" $(MSBuildLastTaskResult) == 'True'  " />
    <CallTarget Targets="CopySqlFilesToBuildDir" Condition=" $(MSBuildLastTaskResult) == 'True'  " />
    <CallTarget Targets="CopyWorkFlowScriptToBuildDir" Condition=" $(MSBuildLastTaskResult) == 'True'  " />

    <CallTarget Targets="ConfigTransformation" Condition=" $(MSBuildLastTaskResult) == 'True'  " />
    <CallTarget Targets="CommandFileTransaformation" Condition=" $(MSBuildLastTaskResult) == 'True'  " />
    
    <CallTarget Targets="GenerateSqlScriptFromDbDeploy" Condition=" $(MSBuildLastTaskResult) == 'True'  " />

    <CallTarget Targets="CreateSVNLabelOnSVN" Condition="$(MSBuildLastTaskResult) == 'True'"/>

  </Target>

  <Target Name="GetNewAssemblyVersionNumber" Condition="$(UpdateBuildVersion)=='true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!=''">GetNewAssemblyVersionNumber</CurrentTargetName>
    </PropertyGroup>


    <CallTarget Targets="GetNewAssemblyVersionNumberFromDatabase" Condition="$(AssemblyBuildNumber)== '' "></CallTarget>
    <CallTarget Targets="GetNewAssemblyVersionNumberFromPropertyFile" Condition="$(AssemblyBuildNumber) != '' " ></CallTarget>

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="GetNewAssemblyVersionNumberFromDatabase">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!=''">GetNewAssemblyVersionNumberFromDatabase</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="ExecuteScalar"
      UseTransaction="true"
      Sql="select top 1  ScriptOutput from $(DatabaseChangeLogTableName) where ScriptOutput!=''  order by CompleteDate desc"
      ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="PreviousAssemblyVersionNumber" TaskParameter="ScalarResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>

    <Message Text="Previous assembly version number was: $(PreviousAssemblyVersionNumber)"></Message>

    <GenerateNewAssemblyVersionNumber OldAssemblyVersion="$(PreviousAssemblyVersionNumber)" Condition="'$(PreviousAssemblyVersionNumber)' != '' ">
      <Output PropertyName="NewAssemblyVersion" TaskParameter="NewAssemblyVersion"/>
    </GenerateNewAssemblyVersionNumber>

    <Message Text="Setting new assembly version number: $(NewAssemblyVersion)"></Message>

    <WriteLinesToFile File="$(TempAssemblyFile)" Lines="$(NewAssemblyVersion)" Overwrite="true"/>



    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="GetNewAssemblyVersionNumberFromPropertyFile">

    <!--NOTE: This target will get assembly version number from  environment specific props file and write it on tempAssemblyFile for next step use. -->
    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!=''">GetNewAssemblyVersionNumberFromPropertyFile</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <WriteLinesToFile File="$(TempAssemblyFile)" Lines="$(AssemblyBuildNumber)" Overwrite="true"/>

    <Message Text="Setting new assembly version number: $(AssemblyBuildNumber)"></Message>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>



  <Target Name="BuildSolution" DependsOnTargets="BuildCXCEngine">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildSolution'">BuildSolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CallTarget Targets="BuildGDISolution"></CallTarget>
    <CallTarget Targets="CopyGDIConfigAndLayoutFiles"></CallTarget>

    <CallTarget Targets="BuildPrimePaySolution"></CallTarget>
    <CallTarget Targets="CopyPrimePayConfigAndLayoutFiles"></CallTarget>

    <CallTarget Targets="BuildPayFlexSolution"></CallTarget>
    <CallTarget Targets="CopyPayFlexConfigAndLayoutFiles"></CallTarget>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCSecuritySolution" Inputs="@(CXCSecurityCSharpFiles)" Outputs="@(CXCSecurityAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildGDISolution'">BuildGDISolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCSecuritySolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCDataAccessSolution" Inputs="@(CXCDataAccessCSharpFiles)" Outputs="@(CXCDataAccessAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCDataAccessSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCNotifierSolution" Inputs="@(CXCNotifierCSharpFiles)" Outputs="@(CXCNotifierAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCNotifierSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCFileWriterSolution" Inputs="@(CXCFileWriterCSharpFiles)" Outputs="@(CXCFileWriterAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCFileWriterSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCFileReaderSolution" Inputs="@(CXCFileReaderCSharpFiles)" Outputs="@(CXCFileReaderAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCFileReaderSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCFaxerSolution" Inputs="@(CXCFaxerCSharpFiles)" Outputs="@(CXCFaxerAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCFaxerSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCArchiverSolution" Inputs="@(CXCArchiverCSharpFiles)" Outputs="@(CXCArchiverAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCArchiverSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCSchedulerSolution" Inputs="@(CXCSchedulerCSharpFiles)" Outputs="@(CXCSchedulerAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCSchedulerSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCCoreSolution" Inputs="@(CXCCoreCSharpFiles)" Outputs="@(CXCCoreAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCCoreSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>


  <Target Name="BuildCXCEngineSolution" Inputs="@(CXCEngineCSharpFiles)" Outputs="@(CXCEngineAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCEngineSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>




  <Target Name="BuildCXCEngine">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCEngine'">BuildCXCEngine</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CallTarget Targets="BuildCXCSecuritySolution"></CallTarget>
    <CallTarget Targets="BuildCXCDataAccessSolution"></CallTarget>
    <CallTarget Targets="BuildCXCNotifierSolution"></CallTarget>
    <CallTarget Targets="BuildCXCFileWriterSolution"></CallTarget>
    <CallTarget Targets="BuildCXCFileReaderSolution"></CallTarget>

    <CallTarget Targets="BuildCXCFaxerSolution"></CallTarget>
    <CallTarget Targets="BuildCXCArchiverSolution"></CallTarget>
    <CallTarget Targets="BuildCXCSchedulerSolution"></CallTarget>
    <CallTarget Targets="BuildCXCCoreSolution"></CallTarget>
    <CallTarget Targets="BuildCXCEngineSolution"></CallTarget>

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\CXC\CXCEngine\bin\Release\Config $(BuildDirForApp)\Config -c -u' />
    <!--<Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\CXC\CXCCore\Build\MetaChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\CXCCore\2.CXCCore_Meta -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\CXC\CXCCore\Build\SchemaChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\CXCCore\1.CXCCore_SchemaChanges -c -u' />-->

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />


    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />



  </Target>

  <Target Name="BuildGDISolution" Inputs="@(GDICSharpFiles)" Outputs="@(GDIAssemblyFile)"  Condition="$(BuildGDI) == 'true'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildGDISolution'">BuildGDISolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <!--<Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\GDI\GDI\Build\DataChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\GDI\3.GDI_DataChanges -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\GDI\GDI\Build\MetaChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\GDI\4.GDI_MetaChanges -c -u' />-->

    <MSBuild Projects="@(GDISolutionFile)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="CopyGDIConfigAndLayoutFiles" Condition="$(BuildGDI) == 'true'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyGDIConfigAndLayoutFiles'">CopyGDIConfigAndLayoutFiles</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\GDI\GDI\Config $(BuildDirForApp)\GDI\Config -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\GDI\GDI\layout $(BuildDirForApp)\GDI\layout -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />
  </Target>

  <Target Name="BuildPrimePaySolution" Inputs="@(PrimePayCSharpFiles)" Outputs="@(PrimePayAssemblyFile)" Condition="$(BuildPrimePay) == 'true'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildPrimePaySolution'">BuildPrimePaySolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <!--<Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PrimePay\CXCPrimePay\Build\DataChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\PrimePay\3.PrimePay_DataChanges -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PrimePay\CXCPrimePay\Build\MetaChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\PrimePay\4.PrimePay_MetaChanges -c -u' />-->

    <MSBuild Projects="@(PrimePaySolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="CopyPrimePayConfigAndLayoutFiles" Condition="$(BuildPrimePay) == 'true'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyPrimePayConfigAndLayoutFiles'">CopyPrimePayConfigAndLayoutFiles</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PrimePay\CXCPrimePay\Config $(BuildDirForApp)\PrimePay\Config -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PrimePay\CXCPrimePay\layout $(BuildDirForApp)\PrimePay\layout -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />
  </Target>

  <Target Name="BuildPayFlexSolution" Inputs="@(PayFlexCSharpFiles)" Outputs="@(PayFlexAssemblyFileName)" Condition="$(BuildPayFlex) == 'true'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildPayFlexSolution'">BuildPayFlexSolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(PayFlexSolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="CopyPayFlexConfigAndLayoutFiles" Condition="$(BuildPayFlex) == 'true'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyPayFlexConfigAndLayoutFiles'">CopyPayFlexConfigAndLayoutFiles</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PayFlex\PayFlex\Config $(BuildDirForApp)\PayFlex\Config -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PayFlex\PayFlex\layout $(BuildDirForApp)\PayFlex\layout -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />
  </Target>

  <Target Name="CopyBuildFilesToBuildDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyBuildFilesToBuildDir'">CopyBuildFilesToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <ItemGroup>
      <BuildFiles Include="$(RootDirForSurceCode)\CXC\CXCEngine\bin\Release\*.dll"/>
      <BuildFiles Include="$(RootDirForSurceCode)\CXC\CXCEngine\bin\Release\*.exe"/>
      <BuildFiles Include="$(RootDirForSurceCode)\CXC\CXCEngine\bin\Release\*.exe.config"/>
    </ItemGroup>

    <Copy SourceFiles="@(BuildFiles)"
			  	DestinationFolder="$(BuildDirForApp)\%(RecursiveDir)"
          SkipUnchangedFiles="true" />


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="CopySqlFilesToBuildDir"  Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this" DependsOnTargets="CopyCXCCoreSqlFilesToBuildDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopySqlFilesToBuildDir'">CopySqlFilesToBuildDir</CurrentTargetName>
      <SourceDirForMetaChangeScript>%(SolutionName.SourceDirForMetaChangeScript)</SourceDirForMetaChangeScript>
      <SourceDirForDataChangeScript>%(SolutionName.SourceDirForDataChangeScript)</SourceDirForDataChangeScript>
      <BuildDirForMetaSqlScript>%(SolutionName.BuildDirForMetaSqlScript)</BuildDirForMetaSqlScript>
      <BuildDirForDataSqlScript>%(SolutionName.BuildDirForDataSqlScript)</BuildDirForDataSqlScript>
    </PropertyGroup>



    <!--<MSBuild.ExtensionPack.FileSystem.RoboCopy
      Source="$(SourceDirForMetaChangeScript)"
      Destination="$(BuildDirForMetaSqlScript)"
      Files="*.*"
      Options="/E /XO" />-->

    <Message Text="Copying Meta Sql files for TPA:  %(SolutionName.TPAName)"></Message>
    <Exec Command='$(LibDir)\ContentSync.exe $(SourceDirForMetaChangeScript) $(BuildDirForMetaSqlScript) -c -u' />

    <!--<MSBuild.ExtensionPack.FileSystem.RoboCopy
      Source="$(SourceDirForDataChangeScript)"
      Destination="$(BuildDirForDataSqlScript)"
      Files="*.*"
      Options="/E /XO" />-->

    <Message Text="Copying Data Sql files for TPA:  %(SolutionName.TPAName)"></Message>
    <Exec Command='$(LibDir)\ContentSync.exe $(SourceDirForDataChangeScript) $(BuildDirForDataSqlScript) -c -u' />
    
    
    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="CopyCXCCoreSqlFilesToBuildDir" Condition="$(BuildCXCEngine) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyCXCCoreSqlFilesToBuildDir'">CopyCXCCoreSqlFilesToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CallTarget Targets="CopyCXCCoreSchemaChangesFilesToBuildDir"></CallTarget>
    <CallTarget Targets="CopyCXCCoreMetaChangesFilesToBuildDir" Condition="$(BuildPayFlex) != 'true' "></CallTarget>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="CopyCXCCoreSchemaChangesFilesToBuildDir" Condition="$(BuildCXCEngine) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyCXCCoreSchemaChangesFilesToBuildDir'">CopyCXCCoreSchemaChangesFilesToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\CXC\CXCCore\Build\SchemaChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\CXCCore\1.CXCCore_SchemaChanges -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

  </Target>

  <Target Name="CopyCXCCoreMetaChangesFilesToBuildDir" Condition="$(BuildCXCEngine) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyCXCCoreMetaChangesFilesToBuildDir'">CopyCXCCoreMetaChangesFilesToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\CXC\CXCCore\Build\MetaChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\CXCCore\2.CXCCore_Meta -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

  </Target>


  <Target Name="CopyWorkFlowScriptToBuildDir"  Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this" DependsOnTargets="CopyCommandWorkflowScriptToBuildDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyWorkFlowScriptToBuildDir'">CopyWorkFlowScriptToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <PropertyGroup>
      <SourceDirForWorkflowFile>%(SolutionName.SourceDirForWorkflowScript)</SourceDirForWorkflowFile>
      <BuildDirForWorkflowScript>%(SolutionName.BuildDirForWorkflowScript)</BuildDirForWorkflowScript>
    </PropertyGroup>



    <MSBuild.ExtensionPack.FileSystem.RoboCopy
      Source="$(SourceDirForWorkflowFile)"
      Destination="$(BuildDirForWorkflowScript)"
      Files="*.*"
      Options="/E /XO"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="CopyCommandWorkflowScriptToBuildDir" Condition="$(BuildCXCEngine) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyCommandWorkflowScriptToBuildDir'">CopyCommandWorkflowScriptToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <ItemGroup>
      <SourceDirForCommandWorkflowScript Include="$(RootDirForSurceCode)\CXC\Scripts\*.*" />
    </ItemGroup>


    <!--<Copy SourceFiles="@(SourceDirForCommandWorkflowScript)"
          DestinationFolder="$(BuildDirForCommonWorkflowScript)"
          SkipUnchangedFiles="true" />-->

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\CXC\Scripts $(BuildDirForCommonWorkflowScript) -c -u' />


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="ConfigTransformation">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='ConfigTransformation'">ConfigTransformation</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CallTarget Targets="ConfigTranformationForCXCCore"></CallTarget>
    <CallTarget Targets="ConfigTranformationForTPA"></CallTarget>

    <CallTarget Targets="ConfigTranformationForDbDeploy"></CallTarget>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />


  </Target>

  <Target Name="ConfigTranformationForCXCCore" Condition="$(BuildCXCEngine) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='ConfigTranformationForCXCCore'">ConfigTranformationForCXCCore</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <XmlPreprocess
      ToolPath="$(LibDir)"
      InputFiles="$(BuildDirForApp)\config\StateParams.xml"
      OutputFiles="$(BuildDirForApp)\config\StateParams.xml"
      SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
      Environment="$(Environment)"
  	  Clean="$(XmlPreprocessorCleanFile)"
	    Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
      ToolPath="$(LibDir)"
      InputFiles="$(BuildDirForApp)\config\CoreParams.xml"
      OutputFiles="$(BuildDirForApp)\config\CoreParams.xml"
      SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
      Environment="$(Environment)"
  	  Clean="$(XmlPreprocessorCleanFile)"
	    Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
      ToolPath="$(LibDir)"
      InputFiles="$(BuildDirForApp)\config\DataAccess.xml"
      OutputFiles="$(BuildDirForApp)\config\DataAccess.xml"
      SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
      Environment="$(Environment)"
  	  Clean="$(XmlPreprocessorCleanFile)"
	    Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
          ToolPath="$(LibDir)"
          InputFiles="$(BuildDirForApp)\config\AlertParams.xml"
          OutputFiles="$(BuildDirForApp)\config\AlertParams.xml"
          SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
          Environment="$(Environment)"
          Clean="$(XmlPreprocessorCleanFile)"
          Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
             ToolPath="$(LibDir)"
             InputFiles="$(BuildDirForApp)\config\Archiver.xml"
             OutputFiles="$(BuildDirForApp)\config\Archiver.xml"
             SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
             Environment="$(Environment)"
             Clean="$(XmlPreprocessorCleanFile)"
             Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
            ToolPath="$(LibDir)"
            InputFiles="$(BuildDirForApp)\config\Notifier.xml"
            OutputFiles="$(BuildDirForApp)\config\Notifier.xml"
            SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
            Environment="$(Environment)"
            Clean="$(XmlPreprocessorCleanFile)"
            Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
           ToolPath="$(LibDir)"
           InputFiles="$(BuildDirForApp)\CXCEngine.exe.config"
           OutputFiles="$(BuildDirForApp)\CXCEngine.exe.config"
           SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
           Environment="$(Environment)"
           Clean="$(XmlPreprocessorCleanFile)"
           Validate="$(XmlPreprocessorValidateFile)" />


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="ConfigTranformationForTPA" Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='ConfigTranformationForTPA'">ConfigTranformationForTPA</CurrentTargetName>
      <BuildDirForStateParamXmlFile>%(SolutionName.BuildDirForStateParamXmlFile)</BuildDirForStateParamXmlFile>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Message Text="Config transformation for TPA: %(SolutionName.TPAName)"></Message>
      
    <XmlPreprocess
      ToolPath="$(LibDir)"
      InputFiles="$(BuildDirForStateParamXmlFile)"
      OutputFiles="$(BuildDirForStateParamXmlFile)"
      SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
      Environment="$(Environment)"
  	  Clean="$(XmlPreprocessorCleanFile)"
	    Validate="$(XmlPreprocessorValidateFile)" />


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="ConfigTranformationForDbDeploy">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='ConfigTranformationForDbDeploy'">ConfigTranformationForDbDeploy</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <!--Convert mssql_apply.vm.tt file to mssql_apply.vm file-->
    <Copy SourceFiles="$(LibDir)\Resources\mssql_apply.vm.tt" DestinationFiles="$(LibDir)\Resources\mssql_apply.vm"></Copy>
    <!--Convert mssql_undo.vm.tt file to mssql_undo.vm file-->
    <Copy SourceFiles="$(LibDir)\Resources\mssql_undo.vm.tt" DestinationFiles="$(LibDir)\Resources\mssql_undo.vm"></Copy>

    <FindAndReplace
                  Filename="$(LibDir)\Resources\mssql_apply.vm"
                  FindWord="USE #CLAIMXODATABASE#"
                  ReplaceWithWord="USE [$(DatabaseName)]" />


    <FindAndReplace
                  Filename="$(LibDir)\Resources\mssql_apply.vm"
                  FindWord="USE #DBDEPLOYDATABASE#"
                  ReplaceWithWord="USE [$(dbDeployDBName)]" />


    <FindAndReplace
                  Filename="$(LibDir)\Resources\mssql_undo.vm"
                  FindWord="USE #DBDEPLOYDATABASE#"
                  ReplaceWithWord="USE [$(dbDeployDBName)]" />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="CommandFileTransaformation">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CommandFileTransaformation'">CommandFileTransaformation</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CallTarget Targets="CommonCommandFileTransform" />
    <CallTarget Targets="TPASpecificCommandFileTransform" />


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="CommonCommandFileTransform" Condition="$(BuildCXCEngine) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CommonCommandFileTransform'">CommonCommandFileTransform</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CommandFileTransformation SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
                               TabName="CommandSettings"
                               Environment ="$(Environment)"
                               InputFiles="$(BuildDirForCommonWorkflowScript)\SetEnv.cmd"
                               OutputFiles="$(BuildDirForCommonWorkflowScript)\SetEnv.cmd"
                               VariableColumnName="$(PropertiesColumnInSettingSpreadsheet)" >
      <Output TaskParameter="ErrorMessage" PropertyName="ErrorMessage" />
    </CommandFileTransformation>


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="TPASpecificCommandFileTransform" Inputs="%(CommandFileName.Identity)" Outputs="%(CommandFileName.Identity)\Ignore_this">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='TPASpecificCommandFileTransform'">TPASpecificCommandFileTransform</CurrentTargetName>
      <CommandFileName>@(CommandFileName)</CommandFileName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CommandFileTransformation SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
                               TabName="CommandSettings"
                               Environment ="$(Environment)"
                               InputFiles="$(CommandFileName)"
                               OutputFiles="$(CommandFileName)"
                               VariableColumnName="$(PropertiesColumnInSettingSpreadsheet)" >
      <Output TaskParameter="ErrorMessage" PropertyName="ErrorMessage" />
    </CommandFileTransformation>

    <Message Text="$(ErrorMessage)"></Message>


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="CreateSVNLabelOnSVN" Condition="$(CreateSVNLabel) == 'True'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CreateSVNLabelOnSVN'">CreateSVNLabelOnSVN</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <ReadLinesFromFile File="@(GeneratedAssemblyFileName)">
      <Output TaskParameter="Lines" PropertyName="VersionNumber" />
    </ReadLinesFromFile>

    <PropertyGroup>
      <SvnDestinationPath Condition="'$(VersionNumber)' != '' ">$(SVNTagURL)/$(Environment)_$(CurrentDateTime)_$(VersionNumber)</SvnDestinationPath>
      <SvnDestinationPath Condition="'$(VersionNumber)' == '' ">$(SVNTagURL)/$(Environment)_$(CurrentDateTime)</SvnDestinationPath>
    </PropertyGroup>

    <SvnCopy SourcePath="$(SVNSourceURL)"
      DestinationPath="$(SvnDestinationPath)"
      Message="$(CurrentDate)_@(VersionNumber)"
      Username="$(SvnUsername)" password="$(SvnPassword)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>




  <Target Name="PostBuild" Condition=" $(OnlyBuildOrOnlyPush) != 'onlypush' ">

    <CallTarget Targets="CopyBuildFilesToDeploymentDir"  Condition="$(MSBuildLastTaskResult) == 'True' "/>
    <CallTarget Targets="CopyDbDeployOutputFilesToDeploymentDir" Condition="$(MSBuildLastTaskResult) == 'True' "/>
    <CallTarget Targets="CopyWorkflowScriptsToDeploymentDir"  Condition="$(MSBuildLastTaskResult) == 'True' "/>
    <CallTarget Targets="BackupPostBuildDeployment"  Condition="$(MSBuildLastTaskResult) == 'True' "/>

  </Target>

  <Target Name="CopyBuildFilesToDeploymentDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyBuildFilesToDeploymentDir'">CopyBuildFilesToDeploymentDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Message Text = "Start copying files from $(BuildDirForApp) to $(DeploymentDirForApp)"></Message>

    <!--<MSBuild.ExtensionPack.FileSystem.RoboCopy
     Source="$(BuildDirForApp)"
     Destination="$(DeploymentDirForApp)"
     Files="*.*"
     Options="/E /XO" />-->
    
     <Exec Command='$(LibDir)\ContentSync.exe $(BuildDirForApp) $(DeploymentDirForApp) -c -u' />


    <Message Text = "Completed copying files from $(BuildDirForApp) to $(DeploymentDirForApp)"></Message>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="CopyDbDeployOutputFilesToDeploymentDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyDbDeployOutputFilesToDeploymentDir'">CopyDbDeployOutputFilesToDeploymentDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <ItemGroup>
      <DbDeployFiles Include="$(BuildDirForDbDeployOutput)\*.*" />
    </ItemGroup>

    <Message Text = "Start copying files from $(BuildDirForDbDeployOutput) to $(DeploymentDirForDbDeploy)"></Message>

    <!--<Copy SourceFiles="@(DbDeployFiles)"
			  	DestinationFolder="$(DeploymentDirForDbDeploy)\%(RecursiveDir)"
          SkipUnchangedFiles="true" />-->

    <Exec Command='$(LibDir)\ContentSync.exe $(BuildDirForDbDeployOutput) $(DeploymentDirForDbDeploy) -c -u' />


    <Message Text = "Completed copying files from $(BuildDirForDbDeployOutput) to $(DeploymentDirForDbDeploy)"></Message>



    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="CopyWorkflowScriptsToDeploymentDir" Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this" DependsOnTargets="CopyCommonWorkflowScriptsToDeploymentDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyWorkflowScriptsToDeploymentDir'">CopyWorkflowScriptsToDeploymentDir</CurrentTargetName>
      <BuildDirForWorkflowScript>%(SolutionName.BuildDirForWorkflowScript)</BuildDirForWorkflowScript>
      <!--<CommandAndSqlFilesDeploymentDir>%(SolutionName.CommandAndSqlFilesDeploymentDir)</CommandAndSqlFilesDeploymentDir>-->
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <!--<MSBuild.ExtensionPack.FileSystem.RoboCopy
     Source="$(BuildDirForWorkflowScript)"
     Destination="$(DeploymentDirForApp)"
     Files="*.*"
     Options="/E /XO"/>-->
    
    <Exec Command='$(LibDir)\ContentSync.exe $(BuildDirForWorkflowScript) $(DeploymentDirForApp) -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="CopyCommonWorkflowScriptsToDeploymentDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyCommonWorkflowScriptsToDeploymentDir'">CopyCommonWorkflowScriptsToDeploymentDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <MSBuild.ExtensionPack.FileSystem.RoboCopy
     Source="$(BuildDirForCommonWorkflowScript)"
     Destination="$(DeploymentDirForApp)"
     Files="*.*"
     Options="/XO" />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>

  <Target Name="DeployBuildToDestination" Condition=" $(OnlyBuildOrOnlyPush) == 'onlypush' or $(OnlyBuildOrOnlyPush) == '' " >

    <CallTarget Targets="CopyBuildFilesToDestinationDir"  />

    <CallTarget Targets="UpdateDestinationDatabase" Condition="$(MSBuildLastTaskResult) == 'True' " />

    <CallTarget Targets="SaveAssemblyVersionInDestinationDatabase" />


  </Target>

  <Target Name="CopyBuildFilesToDestinationDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyBuildFilesToDestinationDir'">CopyBuildFilesToDestinationDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Message Text = "Start copying files from $(DeploymentDirForApp) to $(DestinationDir)"></Message>

    <!--<ItemGroup>
      <DeploymentAppDir Include="$(DeploymentDirForApp)\**\*.*" />
    </ItemGroup>-->

    <!--<Copy SourceFiles="@(DeploymentAppDir)"
			  	DestinationFolder="$(DestinationDir)\%(RecursiveDir)"
          SkipUnchangedFiles="true" />-->

    <Exec Command='$(LibDir)\ContentSync.exe $(DeploymentDirForApp) $(DestinationDir) -c -u' />




    <Message Text = "Completed copying files from $(DeploymentDirForApp) to $(DestinationDir)"></Message>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />

  </Target>

  <Target Name="SaveAssemblyVersionInDestinationDatabase" Condition="Exists(@(GeneratedAssemblyFileName))">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='SaveAssemblyVersionInDestinationDatabase'">SaveAssemblyVersionInDestinationDatabase</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="ExecuteScalar"
      UseTransaction="false"
      Sql="select max(ScriptNumber) from $(DatabaseChangeLogTableName) where Folder='Dummy' "
      ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="MaxScriptNumberFromDbDeployDatabase" TaskParameter="ScalarResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>


    <MSBuild.ExtensionPack.Science.Maths TaskAction="Add" Numbers="$(MaxScriptNumberFromDbDeployDatabase);1">
      <Output PropertyName="NextScriptNumberForDbDeployDatabase" TaskParameter="Result"/>
    </MSBuild.ExtensionPack.Science.Maths>


    <ReadLinesFromFile File="@(GeneratedAssemblyFileName)">
      <Output TaskParameter="Lines" PropertyName="AssemblyVersionNumber" />
    </ReadLinesFromFile>

    <PropertyGroup>
      <CommandLineSqlForInsertNewAssemblyVersionNumber>Use $(dbDeployDBName) INSERT INTO $(DatabaseChangeLogTableName) VALUES('Dummy', $(NextScriptNumberForDbDeployDatabase), 'DummyScript', GETDATE(), GETDATE(),'dbo','1',  '$(AssemblyVersionNumber)' )</CommandLineSqlForInsertNewAssemblyVersionNumber>
    </PropertyGroup>

    <MSBuild.ExtensionPack.SqlServer.SqlCmd
      TaskAction="Execute"
      Server="$(SqlServerName)"
      Database="$(dbDeployDBName)"
      CommandLineQuery="$(CommandLineSqlForInsertNewAssemblyVersionNumber)"
      Condition="$(IsSqlWindowsAuthentication)=='true'"/>



    <MSBuild.ExtensionPack.SqlServer.SqlCmd
      TaskAction="Execute"
      Server="$(SqlServerName)"
      Database="$(dbDeployDBName)"
      LogOn="$(SqlServerUserName)"
      Password="$(SqlServerPassword)"
      CommandLineQuery="$(CommandLineSqlForInsertNewAssemblyVersionNumber)"
      Condition="$(IsSqlWindowsAuthentication)=='false'"/>


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    <OnError ExecuteTargets="SendEmailNotification" Condition="$(SendEmailNotification)=='true'"  />
  </Target>


  <Target Name="CleanTempFiles">

    <RemoveDir Directories="$(TempDir)" />

    <ItemGroup>
      <DeleteTempErrorLog Include="$(TempDirForLog)/**/*.*" Exclude="$(ErrorLogFileName)" />
    </ItemGroup>

    <Delete Files="@(DeleteTempErrorLog)" ContinueOnError="true" />


  </Target>


  <Target Name="Build">

    <CallTarget Targets="Init"></CallTarget>

    <CallTarget Targets="CreateFolderStructure" Condition="$(OnlyBuildOrOnlyPush) != 'onlypush' " />

    <CallTarget Targets="DownloadPreBuildSourceFromSVN" Condition="$(MSBuildLastTaskResult) == 'True' and $(OnlyBuildOrOnlyPush) != 'onlypush' "/>

    <CallTarget Targets="BackupPreBuild" Condition="$(MSBuildLastTaskResult) == 'True' and $(OnlyBuildOrOnlyPush) != 'onlypush' "></CallTarget>

    <CallTarget Targets="BuildSolutions"></CallTarget>

    <CallTarget Targets="PostBuild"></CallTarget>

    <CallTarget Targets="DeployBuildToDestination"></CallTarget>

  </Target>


  <Target Name="Run">

    <Exec Command="C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe $(MSBuildThisFile) /t:Build /fl1 /fl2 /flp1:logfile=$(LogFileName) /flp2:logfile=$(ErrorLogFileName);errorsonly;warningsonly "/>

    <CallTarget Targets="CleanTempFiles" Condition="$(MSBuildLastTaskResult) == 'True' and ($(OnlyBuildOrOnlyPush) == 'onlypush' or $(OnlyBuildOrOnlyPush) == '') " />


  </Target>


</Project>